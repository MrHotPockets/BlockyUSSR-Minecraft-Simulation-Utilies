//gameStates: menu, game, death
//playerStates: jumping, still
//mobs are bad blocks and bad blocks are mobs.
var gameState = 'menu';
var playerState = 'still';
var blockState = 'hidden'
var jumpingTime = -1;
var groundHeight;
var mobsSpawned = 0;
var difficulty = 1;
var mobSpawnChance = 0;
var colorList = ['red', 'green']
var summonTick = 0;
var tick = 0;
var totalmsTime = [];
var intervalID;
var debug = 0;
var secondtick = 0;
function createGround(height, borderthickness, color, fillcolor){
createCanvas("ground");
setStrokeColor(color);
setStrokeWidth(borderthickness);
setFillColor(fillcolor);
groundHeight = 445-height;
rect(0,(groundHeight),320,height);
}

function blockTick(delay){
  setInterval(function blockTickRun(){
  if (randomNumber(1, 10) === 1 && getProperty("target", "hidden", true)){
    setProperty("target", "hidden", false)
    showElement("target")
    msTick(4)
  }
  }, delay)
}

function visualTick(delay){
  setInterval(function visualTickRun() {
    var playerHeight;
    playerHeight = getProperty("circle", "y") + getProperty("circle", "height");
    //If the player is above the ground and is not jumping he will fall by 2
    if ((playerHeight < groundHeight) && (playerState != 'jumping')){
      setProperty("circle", "y", getProperty("circle", "y") + 20);
    }
    //If the player is above the ground and is jumping he will rise up by 1
    else if (playerState == 'jumping'){
      setProperty("circle", "y", 360 - ((20 * Math.pow(jumpingTime - 1, 2)) / 9));
      //console.log(jumpingTime, getProperty("circle", "y"));
      if (jumpingTime === 8){
        playerState = 'still';
        jumpingTime = -1;
      }
      else{
        jumpingTime++;
      }
    }
    if (((getProperty("circle", "y") - 30 < getProperty("target", "y")) && (getProperty("target", "hidden") === false))){
    console.log(blockState)
    console.log(getProperty("target", "y"));
    console.log(getProperty("circle", "y"));
      clearInterval(intervalID)
      clearInterval(secondID)
      display(tick * 4 - 250)
      tick = 0
      secondtick = 0
      debug = 0
      setProperty("target", "hidden", true)
      blockState === 'hidden'
      console.log(totalmsTime)
    }
  }, delay)
}
function msTick(delay){
intervalID = setInterval(function count(){
    tick++
  }, delay)
}
function display(score){
  if (blockState !== 'shown'){
    score = -250
  }
  appendItem(totalmsTime, score)
  setProperty("score", "text", score)
  setProperty("score", "hidden", false)
  setTimeout(null1(), 100)
  setProperty("score", "hidden", true)
}

setScreen("menu");
setProperty("circle", "hidden", true);
onEvent("button1","click", function startGame(){
  setScreen("game");
  createGround(50, 1, "black", "black");
  setProperty("circle", "y", groundHeight - getProperty("circle", "height") - 20);
  setProperty("circle", "hidden", false);
  gameState = 'game';
  visualTick(16);
  blockTick(100);
});
onEvent("game", "keydown", function(){
  var playerHeight = getProperty("circle", "y") + getProperty("circle", "height");
  if (playerState != 'jumping' && jumpingTime != 0 && playerHeight >= groundHeight){
    if (blockState === 'shown'){
      playerState = 'jumping';
      jumpingTime = 0;
    }
    else {
      
    }
  }
  });

  
console.log(360 - (20 * Math.pow(8 - 1, 2) / 9));
console.log(getProperty("target", "y"));
//https://www.desmos.com/calculator/mym029fd3h























